@page "/checkout"
@inject ICartClient CartClient
@inject IOrderClient OrderClient
@inject IDialogService DialogService
@inject IUserAddressClient UserAddressClient
@inject IMapper Mapper
@inject NavigationManager Nav


<PageTitle>تسویه حساب</PageTitle>

@if (_cart is null)
{
    <p>در حال بارگذاری...</p>
}
else if (!_cart.Items.Any())
{
    <MudText Typo="Typo.h5" Align="Align.Center" Class="my-7">سبد خرید شما خالی است.</MudText>
}
else
{
    <MudItem sm="12" lg="9" Class="mx-auto">

        <div class="mb-4">
            <MudText Typo="Typo.h5" Inline Class="pl-3 scondary-background rounded-lg">سبد خرید</MudText>
        </div>

        <MudGrid>
            <MudItem xs="12" lg="8">
                <CartCard CartItems="_cart.Items" OnCartChanged="LoadCart"></CartCard>

                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                    <MudButton Href="/cart" Variant="Variant.Outlined" StartIcon="@Icons.Material.Rounded.ArrowForward"
                               Class="rounded-lg border-color-gray-Lighten2">سبد خرید</MudButton>

                    <MudButton OnClick="SubmitOrder" StartIcon="@Icons.Material.TwoTone.CreditCard" Class="rounded-lg"
                               Variant="Variant.Outlined" Color="Color.Primary">پرداخت</MudButton>
                </MudStack>
            </MudItem>
            <MudItem xs="12" lg="4">

                <MudPaper Outlined Class="rounded-xl pa-6 mb-3" Elevation="2">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                        <MudText Typo="Typo.h5" Class="pl-4 rounded-lg primary-background">آدرس</MudText>

                        <MudButton OnClick="OpenChoiceAddressDialog"
                                   Variant="Variant.Filled" Color="Color.Primary"
                                   DropShadow="false"
                                   Size="Size.Small"
                                   Class="rounded-lg px-1 py-0 ma-0 botton-tag">تغییر</MudButton>

                    </MudStack>

                    <MudDivider Class="mb-3" />

                    @if (_userAddress is not null)
                    {
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body2">عنوان:</MudText>
                            <MudText Typo="Typo.body1">@_userAddress.Title</MudText>
                        </MudStack>
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body2">کدپستی:</MudText>
                            <MudText Typo="Typo.body1">@_userAddress.ZipCode</MudText>
                        </MudStack>
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body2">استان:</MudText>
                            <MudText Typo="Typo.body1">@_userAddress.State</MudText>
                        </MudStack>
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body2">شهر:</MudText>
                            <MudText Typo="Typo.body1">@_userAddress.City</MudText>
                        </MudStack>
                        <MudStack Justify="Justify.FlexEnd">
                            <MudText Typo="Typo.body1">@_userAddress.Street</MudText>
                        </MudStack>
                    }
                    else
                    {
                        <MudText Typo="Typo.h6">شما هنوز هیچ آدرسی ثبت نکرده اید</MudText>
                    }


                </MudPaper>

                <OrderSummary Model="_orderSummary" />

            </MudItem>
        </MudGrid>
    </MudItem>
}


@code {
    private UserAddressDto? _userAddress;
    private CreateOrderRequest _order = new();
    private OrderSummaryModel _orderSummary = new();
    private CartDto? _cart;


    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
        await LoadUserAddress();
    }


    private async Task OpenChoiceAddressDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall,
            CloseButton = true,
            FullWidth = true
        };
        var parameters = new DialogParameters<ChoiceAddress>
        {
            { x => x.SelectedAddressId, _userAddress.Id}
        };

        var dialog = await DialogService.ShowAsync<ChoiceAddress>("انتخاب آدرس", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                if (result.Data is not null)
                {
                    _userAddress = (UserAddressDto)result.Data;
                }
            }
    }

    private async Task LoadUserAddress()
    {
        _userAddress = await UserAddressClient.GetDefault();
    }

    private async Task LoadCart()
    {
        _cart = await CartClient.GetCartAsync();

        _orderSummary = Mapper.Map<OrderSummaryModel>(_cart);
        StateHasChanged();
    }


    private async Task SubmitOrder()
    {
        if (_cart is not null && _cart.Items.Any())
            _order.CartItems = _cart.Items;

        if (_userAddress is not null)
            _order.ShippingAddress = Mapper.Map<AddressDto>(_userAddress);

        await OrderClient.CreateAsync(_order);

        Nav.NavigateTo("/account/profile");
    }
}
