@inject ISnackbar Snackbar
@inject ICartClient CartClient
@inject IProductClient ProductClient
@inject IFavoriteClient FavoriteClient

<MudCard Class="rounded-xl pa-2" Outlined="true" Elevation="2">
    <MudLink Href="@($"/shop/product/{Product.Id}")"><MudCardMedia Class="rounded-xl" Image="@Product.ImageUrl" Height="200" /></MudLink>
    <MudCardContent>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudLink Href="@($"/shop/product/{Product.Id}")" Underline="Underline.None" Color="Color.Dark" Typo="Typo.h5">@Product.Name</MudLink>
            <AuthorizeView>
                <Authorized>
                        <MudToggleIconButton 
                            @bind-Toggled="IsFav" 
                            @onclick="ToggleFavorite" 
                            Icon="@Icons.Material.Rounded.FavoriteBorder" 
                            ToggledIcon="@Icons.Material.Rounded.Favorite" 
                            Color="Color.Dark" 
                            ToggledColor="Color.Primary"
                            Size="Size.Small" 
                            Class="pa-1" 
                            aria-label="add to favorite" />
                </Authorized>
                <NotAuthorized>
                    <MudIconButton Href="/login" Class="pa-1" Icon="@Icons.Material.Rounded.FavoriteBorder" Color="Color.Dark" Size="Size.Small" aria-label="add to favorite" />
                </NotAuthorized>
            </AuthorizeView>
        </MudStack>
        <MudText Typo="Typo.body2">سایز: متوسط | جنس: چرم مصنوعی</MudText>
    </MudCardContent>
    <MudCardActions Class="pt-0 justify-space-between">
        <AuthorizeView>
            <Authorized>
                @if (IsInCart)
                {
                    <MudIconButton OnClick="RemoveFromCart" Icon="@Icons.Material.TwoTone.ShoppingCart" Class="ro rounded-lg" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary" />
                }
                else
                {
                    <MudButton OnClick="AddToCart" StartIcon="@Icons.Material.Rounded.AddShoppingCart" Class="ro rounded-lg" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Dark">افزودن</MudButton>
                }
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/login" StartIcon="@Icons.Material.Rounded.AddShoppingCart" Class="ro rounded-lg" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Dark">افزودن</MudButton>
            </NotAuthorized>
        </AuthorizeView>

        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
            @* <MudText Inline="true">@(("500").En2Fa())</MudText> *@
            <MudText Inline="true" typo="Typo.h6">@Product.Price.ToNumeric().En2Fa()</MudText>
            <MudText Inline="true" Typo="Typo.caption">تومان</MudText>
        </MudStack>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public ProductDto Product { get; set; } = new();
    private bool IsFav;
    private bool IsInCart;


    protected override async Task OnInitializedAsync()
    {
        IsFav = await FavoriteClient.IsFavoriteAsync(Product.Id);
        IsInCart = await ProductClient.IsInCartAsync(Product.Id);
    }

    private async Task ToggleFavorite()
    {
        if (IsFav)
        {
            await FavoriteClient.RemoveFromFavoriteAsync(Product.Id);
            Snackbar.Add("محصول از علاقه مندی ها حذف شد", Severity.Warning);

        }
        else
        {
            await FavoriteClient.AddToFavoriteAsync(Product.Id);
            Snackbar.Add("محصول به علاقه مندی ها اضافه شد", Severity.Success);
        }

        IsFav = !IsFav;
    }


    private async Task AddToCart()
    {
        if (Product is null) return;

        var addToCart = new AddToCartRequest
        {
            ProductId = Product.Id,
            ProductName = Product.Name,
            Quantity = 1,
            UnitPrice = Product.Price
        };

        await CartClient.AddItemAsync(addToCart);
        Snackbar.Add("محصول به سبد خرید اضافه شد", Severity.Success);

        IsInCart = true;
    }

    private async Task RemoveFromCart()
    {
        if (Product is null) return;

        await CartClient.RemoveItemAsync(Product.Id);
        Snackbar.Add("محصول از سبد حذف شد", Severity.Warning);

        IsInCart = false;
    }
}
