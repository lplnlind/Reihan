@inject ICartClient CartClient
@inject ISnackbar Snackbar


@foreach (var item in CartItems)
{
    <MudCard Class="rounded-xl pa-2 mb-2 mud-width-full" Outlined="true" Style="@($"background:{Colors.Gray.Lighten5};")">
        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudStack Row AlignItems="AlignItems.Center">
                <MudLink Href="@($"/shop/product/{item.ProductId}")" Style="height: 100px">
                    <MudImage Class="rounded-xl" Src="@item.ProductImage" Height="100" />
                </MudLink>
                <MudCardContent>
                    <MudLink Href="@($"/shop/product/{item.ProductId}")"
                             Underline="Underline.None"
                             Color="Color.Dark"
                             Typo="Typo.h5"
                             Class="primary-background pl-2 rounded-lg">@item.ProductName</MudLink>

                    <MudText Typo="Typo.body2">سایز: متوسط | جنس: چرم مصنوعی</MudText>
                </MudCardContent>
            </MudStack>

            <MudCardActions>
                <MudStack>
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        <MudNumericField T="int"
                                         @bind-Value="item.Quantity"
                                         @onblur="@(e => ChangeQuantity(item.ProductId, item.Quantity))"
                                         Min="1"
                                         Variant="Variant.Outlined"
                                         Margin="Margin.Dense"
                                         Class="ma-0 product-quantity"
                                         Disabled ="IsDisable"
                                         HideSpinButtons />

                        <MudIconButton Icon="@Icons.Material.TwoTone.Delete"
                                       OnClick="e => RemoveItem(item)"
                                       Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       Disabled ="IsDisable"
                                       Class="rounded-lg border-color-gray-Lighten2" />
                    </MudStack>

                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        @* <MudText Inline="true">@(("500").En2Fa())</MudText> *@
                        <MudText Inline="true" typo="Typo.h6">@item.UnitPrice.ToNumeric().En2Fa()</MudText>
                        <MudText Inline="true" Typo="Typo.caption">تومان</MudText>
                    </MudStack>
                </MudStack>
            </MudCardActions>
        </MudStack>
    </MudCard>
}


@code {
    [Parameter] public List<CartItemDto> CartItems { get; set; } = new();
    [Parameter] public bool IsDisable { get; set; } = true;
    [Parameter] public EventCallback OnCartChanged { get; set; }


    private async Task RemoveItem(CartItemDto cart)
    {
        await CartClient.RemoveItemAsync(cart.ProductId);
        CartItems.Remove(cart);
        Snackbar.Add("محصول از سبد حذف شد", Severity.Warning);
        
        await OnCartChanged.InvokeAsync();
    }

    private async Task ChangeQuantity(int productId, int quantity)
    {
        await CartClient.ChangeQuantity(productId, quantity);
        Snackbar.Add("تعداد محصول با موفقیت تغییر پیدا کرد", Severity.Success);
        
        await OnCartChanged.InvokeAsync();
    }
}