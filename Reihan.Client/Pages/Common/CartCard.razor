@inject ICartClient CartClient


@foreach (var item in CartItems)
{
    <MudCard Class="rounded-xl pa-2 mb-2 mud-width-full" Outlined="true" Style="@($"background:{Colors.Gray.Lighten5};")">
        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudStack Row AlignItems="AlignItems.Center">
                <MudLink Href="@($"/shop/product/{item.ProductId}")" Style="height: 100px; width: 100px;">
                    <MudImage Class="rounded-xl mud-height-full mud-width-full"
                              Src="@item.ProductImage"
                              ObjectFit="ObjectFit.Cover"
                              ObjectPosition="ObjectPosition.Center" />
                </MudLink>
                <MudCardContent>
                    <MudLink Href="@($"/shop/product/{item.ProductId}")"
                             Underline="Underline.None"
                             Color="Color.Dark"
                             Typo="Typo.h5"
                             Class="primary-background pl-2 rounded-lg">@item.ProductName</MudLink>

                    <MudText Typo="Typo.body2">سایز: متوسط | جنس: چرم مصنوعی</MudText>
                </MudCardContent>
            </MudStack>

            <MudCardActions>
                <MudStack Spacing="2" AlignItems="AlignItems.End">

                    @if (IsOrder)
                    {
                        <MudText Typo="Typo.body1">@item.Quantity.ToString().En2Fa() *</MudText>
                    }
                    else
                    {
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Justify="Justify.FlexEnd">

                            <div style="width:40px">
                                <MudNumericField T="int"
                                                 @bind-Value="item.Quantity"
                                                 @onblur="@(e => ChangeQuantity(item.ProductId, item.Quantity))"
                                                 Min="1"
                                                 Variant="Variant.Outlined"
                                                 Margin="Margin.Dense"
                                                 Class="ma-0 product-quantity"
                                                 Disabled="IsDisable"
                                                 HideSpinButtons />
                            </div>

                            <MudIconButton Icon="@Icons.Material.TwoTone.Delete"
                                           OnClick="e => RemoveItem(item)"
                                           Variant="Variant.Outlined"
                                           Size="Size.Small"
                                           Disabled="IsDisable"
                                           Class="rounded-lg border-color-gray-Lighten2" />
                        </MudStack>
                    }

                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        @if (item.FinalPrice != item.UnitPrice)
                        {
                            <MudText Inline Typo="Typo.caption" Class="text-through">@item.UnitPrice.ToNumeric().En2Fa()</MudText>
                            <MudText Inline typo="Typo.h6" Class="scondary-background py-0 pr-2 rounded-lg">@item.FinalPrice.ToNumeric().En2Fa()</MudText>
                            <MudText Inline Typo="Typo.caption">تومان</MudText>
                        }
                        else
                        {
                            <MudText Inline typo="Typo.h6">@item.FinalPrice.ToNumeric().En2Fa()</MudText>
                            <MudText Inline Typo="Typo.caption">تومان</MudText>
                        }
                    </MudStack>
                </MudStack>
            </MudCardActions>
        </MudStack>
    </MudCard>
}


@code {
    [Parameter] public List<CartItemDto> CartItems { get; set; } = new();
    [Parameter] public bool IsDisable { get; set; } = true;
    [Parameter] public bool IsOrder { get; set; } = false;
    [Parameter] public EventCallback OnCartChanged { get; set; }


    private async Task RemoveItem(CartItemDto cart)
    {
        await CartClient.RemoveItemAsync(cart.ProductId);
        CartItems.Remove(cart);

        await OnCartChanged.InvokeAsync();
    }

    private async Task ChangeQuantity(int productId, int quantity)
    {
        await CartClient.ChangeQuantity(productId, quantity);
        await OnCartChanged.InvokeAsync();
    }
}