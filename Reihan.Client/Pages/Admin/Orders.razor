@page "/admin/orders"
@attribute [Authorize(Roles = "Admin")]
@inject IOrderClient OrderClient
@inject IDialogService DialogService

<PageTitle>مدیریت سفارش ها</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Outlined="true" Class="rounded-xl pa-2" Elevation="2">
        <MudTable Class="rounded-xl mt-1" Elevation="0" Items="@_orders" Loading="@_loading" Hover="true" Dense="false" Filter="new Func<OrderDto, bool>(FilterFunc1)" @bind-SelectedIte="_orders">
            <ToolBarContent>
                <MudText Typo="Typo.h6">لیست محصولات</MudText>
                <MudSpacer />
                <MudItem lg="3"><MudTextField @bind-Value="searchString1" Placeholder="جستجو" Margin="Margin.Dense" Typo="Typo.caption" Adornment="Adornment.Start" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="ma-0"></MudTextField></MudItem>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.OrderDate)">تاریخ</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.UserFullName)">نام کابر</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.City)">شهر</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.ZipCode.ToString().En2Fa())">کدپستی</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.OrderItemCount)">چند نوع</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.TotalAmount.ToNumeric().En2Fa())">جمع</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.Status.GetDisplayName())">وضعیت</MudTableSortLabel></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="تاریخ">@context.OrderDate.ToPersian().En2Fa()</MudTd>
                <MudTd DataLabel="نام کابر">@context.UserFullName</MudTd>
                <MudTd DataLabel="شهر">@context.City</MudTd>
                <MudTd DataLabel="کدپستی">@context.ZipCode.ToString().En2Fa()</MudTd>
                <MudTd DataLabel="چند نوع">@context.OrderItemCount.ToString().En2Fa()</MudTd>
                <MudTd DataLabel="جمع">@context.TotalAmount.ToNumeric().En2Fa()</MudTd>
                <MudTd DataLabel="وضعیت">
                    <MudSelect T="string" ValueChanged="@(v => UpdateStatus(context.Id, v))" Value="context.Status.GetDisplayName()" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense" Typo="Typo.caption">
                        @foreach (var status in statuses)
                        {
                            <MudSelectItem Value="status">@status</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Rounded.Visibility"
                                   Size="Size.Small"
                                   Href="@($"/admin/order/{@context.Id}")"
                                   Variant="Variant.Outlined"
                                   Class="rounded-lg border-color-gray-Lighten2" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>


@code {
    private List<OrderDto> _orders = new();
    private string searchString1 = "";
    private bool _loading = true;
    private List<string> statuses = EnumExtensions.GetDisplayNames<OrderStatus>();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();

        if (_orders is not null)
            _loading = false;
    }


    private async Task UpdateStatus(int id, string? status)
    {
        if (status is null) return;
        var orderStatus = EnumExtensions.GetEnumFromDisplayName<OrderStatus>(status) ?? OrderStatus.Pending;
        await OrderClient.UpdateOrderStatusAsync(id, orderStatus);

        _orders.FirstOrDefault(o => o.Id == id)!.Status = orderStatus;
    }


    private async Task LoadOrders() =>
        _orders = (await OrderClient.GetAllAsync()).ToList();


    private bool FilterFunc1(OrderDto order) => FilterFunc(order, searchString1);

    private bool FilterFunc(OrderDto order, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (order.UserFullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (order.City.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{order.TotalAmount} {order.ZipCode}".Contains(searchString))
            return true;
        return false;
    }
}