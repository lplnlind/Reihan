@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@inject IUserClient UserClient

<PageTitle>مدیریت کاربران</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Outlined="true" Class="rounded-xl pa-2" Elevation="2">
        <MudTable Class="rounded-xl mt-1" Elevation="0" Items="@_users" Loading="@_loading" Hover="true" Dense="false" Filter="new Func<UserDto, bool>(FilterFunc1)" @bind-SelectedIte="_users">
            <ToolBarContent>
                <MudText Typo="Typo.h6">لیست کابران</MudText>
                <MudSpacer />
                <MudItem lg="3"><MudTextField @bind-Value="searchString1" Placeholder="جستجو" Margin="Margin.Dense" Typo="Typo.caption" Adornment="Adornment.Start" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="ma-0"></MudTextField></MudItem>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<UserDto, object>(x => x.Id)">شناسه</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<UserDto, object>(x => x.FullName)">نام</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<UserDto, object>(x => x.UserName)">نام کاربری</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<UserDto, object>(x => x.Email)">ایمیل</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<UserDto, object>(x => x.IsActive)">وضعیت</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<UserDto, object>(x => x.Role.GetDisplayName())">نقش</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="شناسه">@context.Id</MudTd>
                <MudTd DataLabel="نام">@context.FullName</MudTd>
                <MudTd DataLabel="نام کاربری">@context.UserName</MudTd>
                <MudTd DataLabel="ایمیل">@context.Email</MudTd>
                <MudTd DataLabel="وضعیت">
                    @if (context.IsActive)
                    {
                        <MudButton OnClick="e => ToggleStatus(context.Id, false)"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   DropShadow="false"
                                   StartIcon="@Icons.Material.TwoTone.CheckCircle"
                                   Size="Size.Small"
                                   Class="rounded-lg px-2 py-0 ma-0 botton-tag">فعال</MudButton>
                    }
                    else
                    {
                        <MudButton OnClick="e => ToggleStatus(context.Id, true)"
                                   Variant="Variant.Outlined"
                                   DropShadow="false"
                                   StartIcon="@Icons.Material.TwoTone.Circle"
                                   Size="Size.Small"
                                   Class="rounded-lg px-2 py-0 ma-0 botton-tag">غیرفعال</MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="نقش">
                    <MudSelect T="string" ValueChanged="@(v => UpdateRole(context.Id, v))" Value="context.Role.GetDisplayName()" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense" Typo="Typo.caption">
                        @foreach (var role in roles)
                        {
                            <MudSelectItem Value="role">@role</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>

            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<UserDto> _users = new();
    private List<string> roles = Extensions.EnumExtensions.GetDisplayNames<UserRole>();
    private string searchString1 = "";
    private bool _loading = true;


    protected override async Task OnInitializedAsync()
    {
        _users = await UserClient.GetAllUsersAsync();

        if (_users is not null)
            _loading = false;
    }


    private async Task UpdateRole(int userId, string? role)
    {
        if (role is null) return;
        var userRole = EnumExtensions.GetEnumFromDisplayName<UserRole>(role) ?? UserRole.Customer;
        await UserClient.UpdateUserRoleAsync(userId, userRole);
        
        _users.FirstOrDefault(u => u.Id == userId)!.Role = userRole;
    }

    private async Task ToggleStatus(int userId, bool newStatus)
    {
        await UserClient.ToggleUserStatusAsync(userId, newStatus);

        var user = _users!.FirstOrDefault(u => u.Id == userId);
        if (user is not null) user.IsActive = newStatus;
    }


    private bool FilterFunc1(UserDto user) => FilterFunc(user, searchString1);

    private bool FilterFunc(UserDto user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{user.UserName} {user.Email}".Contains(searchString))
            return true;
        return false;
    }
}
