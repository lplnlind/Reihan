@page "/admin/categories"
@attribute [Authorize(Roles = "Admin")]
@inject ICategoryClient CategoryClient
@inject IDialogService DialogService

<PageTitle>مدیریت دسته‌بندی‌ها</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Outlined="true" Class="rounded-xl pa-2" Elevation="2">
        <MudTable Class="rounded-xl mt-1" Elevation="0" Items="@_categories" Loading="@_loading" Hover="true" Dense="false" Filter="new Func<CategoryDto, bool>(FilterFunc1)" @bind-SelectedIte="_categories">
            <ToolBarContent>
                <MudText Typo="Typo.h6">لیست دسته بندی ها</MudText>
                <MudSpacer />
                <MudItem lg="3">
                    <MudTextField @bind-Value="searchString1" Placeholder="جستجو" Margin="Margin.Dense" Typo="Typo.caption" Adornment="Adornment.Start" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="ma-0"></MudTextField>
                </MudItem>
                <MudIconButton Icon="@Icons.Material.Filled.Add"
                               OnClick="OpenAddDialog"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               Class="mr-5 rounded-xl" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<CategoryDto, object>(x => x.Id)">شناسه</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<CategoryDto, object>(x => x.Name)">نام</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<CategoryDto, object>(x => x.ProductsInThisCategory!)">تعداد محصولات</MudTableSortLabel></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="شناسه">@context.Id</MudTd>
                <MudTd DataLabel="نام">@context.Name</MudTd>
                <MudTd DataLabel="تعداد محصولات">@context.ProductsInThisCategory</MudTd>
                <MudTd>

                    <MudIconButton Icon="@Icons.Material.Rounded.Edit"
                                   Size="Size.Small"
                                   OnClick="@(() => OpenEditDialog(context))"
                                   Variant="Variant.Outlined"
                                   Class="rounded-lg border-color-gray-Lighten2 ml-1" />

                    @if (context.ProductsInThisCategory == 0)
                    {
                        <MudIconButton Icon="@Icons.Material.Rounded.Delete"
                                       Size="Size.Small"
                                       OnClick="@(() => OpenDeleteDialog(context))"
                                       Variant="Variant.Outlined"
                                       Class="rounded-lg border-color-gray-Lighten2" />
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>


@code {
    private List<CategoryDto> _categories = new();
    private CategoryDialog? _categoryDialog;
    private string searchString1 = "";
    private bool _loading = true;


    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();

        if (_categories is not null)
            _loading = false;
    }


    private async Task OpenDeleteDialog(CategoryDto category)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, CloseButton = true, FullWidth = true };
        var parameters = new DialogParameters<CategoryDialog>
        {
            { x => x.Category, category },
            { x => x.ButtonText, "حذف"},
            { x => x.Color, Color.Error},
            { x => x.IsDisable, true}
        };

        var dialog = await DialogService.ShowAsync<CategoryDialog>("حذف دسته بندی", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                await CategoryClient.DeleteAsync(category.Id);
                await LoadCategories();
            }
    }

    private async Task OpenAddDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, CloseButton = true, FullWidth = true };
        var parameters = new DialogParameters<CategoryDialog>
        {
            { x => x.ButtonText, "ثبت"},
            { x => x.Color, Color.Primary}
        };

        var dialog = await DialogService.ShowAsync<CategoryDialog>("ثبت دسته بندی", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                if (result.Data is not null)
                {
                    CategoryDto category = (CategoryDto)result.Data;
                    await CategoryClient.CreateAsync(category);
                    await LoadCategories();
                }
            }
    }

    private async Task OpenEditDialog(CategoryDto category)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, CloseButton = true, FullWidth = true };
        var parameters = new DialogParameters<CategoryDialog>
        {
            { x => x.Category, category },
            { x => x.ButtonText, "ویرایش"},
            { x => x.Color, Color.Primary}
        };

        var dialog = await DialogService.ShowAsync<CategoryDialog>("ویرایش دسته بندی", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                if (result.Data is not null)
                {
                    CategoryDto categoryEdit = (CategoryDto)result.Data;
                    await CategoryClient.UpdateAsync(categoryEdit);
                    await LoadCategories();
                }
            }
    }


    private async Task LoadCategories() =>
        _categories = (await CategoryClient.GetAllAsync()).ToList();


    private bool FilterFunc1(CategoryDto category) => FilterFunc(category, searchString1);

    private bool FilterFunc(CategoryDto category, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}