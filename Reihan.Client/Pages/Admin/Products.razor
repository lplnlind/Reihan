@page "/admin/products"
@attribute [Authorize(Roles = "Admin")]
@inject IProductClient ProductClient
@inject ICategoryClient CategoryClient
@inject IDialogService DialogService

<PageTitle>مدیریت محصولات</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Outlined="true" Class="rounded-xl pa-2" Elevation="2">
        <MudTable Class="rounded-xl mt-1" Elevation="0" Items="@_product" Loading="@_loading" Hover="true" Dense="false" Filter="new Func<ProductDto, bool>(FilterFunc1)" @bind-SelectedIte="_product">
            <ToolBarContent>
                <MudText Typo="Typo.h6">لیست محصولات</MudText>
                <MudSpacer />
                <MudItem lg="3"><MudTextField @bind-Value="searchString1" Placeholder="جستجو" Margin="Margin.Dense" Typo="Typo.caption" Adornment="Adornment.Start" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="ma-0"></MudTextField></MudItem>
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OpenAddDialog" Color="Color.Primary" Variant="Variant.Filled" Class="mr-5 rounded-xl"></MudIconButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.Id)">شناسه</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.Name)">نام</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.CategoryName)">دسته بندی</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.StockQuantity.ToString().En2Fa())">تعداد</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.Price.ToNumeric().En2Fa())">قیمت</MudTableSortLabel></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="شناسه">@context.Id</MudTd>
                <MudTd DataLabel="نام">@context.Name</MudTd>
                <MudTd DataLabel="دسته بندی">@context.CategoryName</MudTd>
                <MudTd DataLabel="تعداد">@context.StockQuantity.ToString().En2Fa()</MudTd>
                <MudTd DataLabel="قیمت">@context.Price.ToNumeric().En2Fa()</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Rounded.Visibility"
                                   Size="Size.Small"
                                   Href="@($"/shop/product/{@context.Id}")"
                                   Variant="Variant.Outlined"
                                   Class="rounded-lg border-color-gray-Lighten2" />

                    <MudIconButton Icon="@Icons.Material.Rounded.Edit"
                                   Size="Size.Small"
                                   OnClick="@(() => OpenEditDialog(context))" 
                                   Variant="Variant.Outlined"
                                   Class="rounded-lg border-color-gray-Lighten2" />

                    <MudIconButton Icon="@Icons.Material.Rounded.Delete"
                                   Size="Size.Small"
                                   OnClick="@(() => OpenDeleteDialog(context))" 
                                   Variant="Variant.Outlined"
                                   Class="rounded-lg border-color-gray-Lighten2" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>


@code {
    private List<CategoryDto> _categories = new();
    private List<ProductDto> _product = new();
    private ProductDialog? _productDialog;
    private string searchString1 = "";
    private bool _loading = true;


    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCategories();

        if (_product is not null)
            _loading = false;
    }


    private async Task OpenDeleteDialog(ProductDto product)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, CloseButton = true };
        var parameters = new DialogParameters<ProductDialog>
        {
            { x => x.Product, product },
            { x => x.ButtonText, "حذف"},
            { x => x.Color, Color.Error},
            { x => x.IsDisable, true}
        };

        var dialog = await DialogService.ShowAsync<ProductDialog>("حذف محصول", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                await ProductClient.DeleteAsync(product.Id);
                await LoadProducts();
            }
    }

    private async Task OpenAddDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, CloseButton = true, FullWidth = true };
        var parameters = new DialogParameters<ProductDialog>
        {
            { x => x.categories, _categories},
            { x => x.ButtonText, "ثبت"},
            { x => x.Color, Color.Primary}
        };

        var dialog = await DialogService.ShowAsync<ProductDialog>("ثبت محصول", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                if (result.Data is not null)
                {
                    ProductDto product = (ProductDto)result.Data;
                    await ProductClient.CreateAsync(product);
                    await LoadProducts();
                }
            }
    }

    private async Task OpenEditDialog(ProductDto product)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, CloseButton = true };
        var parameters = new DialogParameters<ProductDialog>
        {
            { x => x.Product, product },
            { x => x.categories, _categories},
            { x => x.ButtonText, "ویرایش"},
            { x => x.Color, Color.Primary}
        };

        var dialog = await DialogService.ShowAsync<ProductDialog>("ویرایش محصول", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                if (result.Data is not null)
                {
                    ProductDto productEdit = (ProductDto)result.Data;
                    await ProductClient.UpdateAsync(productEdit);
                    await LoadProducts();
                }
            }
    }


    private async Task LoadProducts() =>
        _product = (await ProductClient.GetAllAsync()).ToList();

    private async Task LoadCategories() =>
        _categories = (await CategoryClient.GetAllAsync()).ToList();


    private bool FilterFunc1(ProductDto product) => FilterFunc(product, searchString1);

    private bool FilterFunc(ProductDto product, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (product.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{product.Price} {product.StockQuantity}".Contains(searchString))
            return true;
        return false;
    }
}